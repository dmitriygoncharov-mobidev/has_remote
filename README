= HasRemote

Gives your local ActiveRecord model a remote proxy (ActiveResource::Base),
which enables you to look for certain attributes remotely.

Before usage, make sure your model's table has an integer column called <tt>remote_id</tt>.
(This name can be overridden, see options.)

=== Options

[:remote_key]  The name of the column used to store the id of the remote resource. Defaults to <tt>remote_id</tt>.

[:site, :user, :password, ...]  Basically all ActiveResource configuration settings are available,
                                see http://api.rubyonrails.org/classes/ActiveResource/Base.html      
[:through]     Optional custom ActiveResource class name to use for the proxy. If not set, a default class called
               "<ModelName>::Remote" will be created dynamically. *Note* that any ActiveResource
               configuration options will still be applied to this class.

=== Examples

 class User < ActiveRecord::Base
   has_remote :site => 'http://people.local'
 end

 User.find(1).remote
 # => #<User::Remote> (inherits from ActiveResource::Base)
 
 User.find(1).remote.username
 # => "User name from remote server"

<tt>has_remote</tt> also takes a block which can be used to specify remote attributes:

 class User < ActiveRecord::Base
   has_remote :site => '...' do |remote|
     remote.attribute :username
   end 
 end

 User.find(1).username
 # => "User name from remote server"

If you don't need to instantiate a local record, calling the remote class directly is possible too:

 User::Remote.find(1)

Note that the User::Remote class only exists if User is set up to have a remote and has been loaded.

The <tt>:through</tt> option enables you to specify your own ActiveResource class:

 class RemoteUser < ActiveResource::Base
   self.site = "people.local"
   self.element_name = "person"
 end

 class User < ActiveRecord::Base
   has_remote :through => "RemoteUser"
 end

=== Local cache

In case you need to do database operations on remote attributes, like sorting, you can tell has_remote
to locally cache specific attributes in the following manner:

 class User < ActiveRecord::Base
	 has_remote :site => '...' do |remote|
	   remote.attribute :username, :local_cache => true
	 end
 end

This assumes you have a 'username' column in the 'users' table.

has_remote provides three ways of keeping you locally cached attributes in sync with their remote values.

 1. Manual sync
 2. Auto-sync
 3. Rake task has_remote:sync

==== Manual sync
See HasRemote::Cache for more information on the available methods for triggering synchronization manually.

==== Auto-sync

 class User < ActiveRecord::Base
	 has_remote :site => '...' do |remote|
	   remote.attribute :username, :local_cache => true
	   remote.auto_sync_after 10.minutes 
	 end
 end

==== Rake sync
/Not yet implemented./

*Important:* In order to make use of synchronization you'll have to run the following migration:
 
 class CreateHasRemoteSynchronizations < ActiveRecord::Migration
   def self.up
     create_table :has_remote_synchronizations do |t|
       t.string :model_name, :null => false
       t.datetime :latest_change, :null => false
       t.datetime :created_at
     end
   end

   def self.down
     drop_table :has_remote_synchronizations
   end
 end

=== Documentation

To generate RDocs for this plugin, run:
 rake doc:plugins:has_remote 

=== Testing

To run the specs for the plugin, run:
 script/spec -cfs vendor/plugins/has_remote/spec/

(This assumes you have RSpec installed.)

=== More information & patches

Questions, requests and patches can be directed to sjoerd.andringa@innovationfactory.nl.


Copyright (c) 2009 Innovation Factory.