= HasRemote

Gives your local ActiveRecord model a remote proxy (ActiveResource),
which enables you to look for certain attributes remotely.

=== Installation

 script/plugins install git://github.com/innovationfactory/has_remote.git

 script/generate has_remote_migration

 rake db:migrate

=== Usage

See documentation for HasRemote::ClassMethods#has_remote.

=== Examples

First make sure your records have a reference to a remote resource:

 add_column :users, :remote_id, :integer # Default is 'remote_id', but can be changed, see options for has_remote.

 class User < ActiveRecord::Base
   has_remote :site => 'http://people.local'
 end

 User.find(1).remote
 # => #<User::Remote> (inherits from ActiveResource::Base)
 
 User.find(1).remote.username
 # => "User name from remote server"

has_remote optionally takes a block which can be used to specify remote attributes:

 class User < ActiveRecord::Base
   has_remote :site => '...' do |remote|
     remote.attribute :username
   end 
 end

 User.find(1).username
 # => "User name from remote server"

If you don't need to instantiate a local record, calling the remote class directly is possible too:

 User::Remote.find(1)

Note that the User::Remote class only exists if User is set up to have a remote and has been loaded.

The <tt>:through</tt> option enables you to specify your own ActiveResource class:

 class RemoteUser < ActiveResource::Base
   self.site = "people.local"
   self.element_name = "person"
 end

 class User < ActiveRecord::Base
   has_remote :through => "RemoteUser"
 end

=== Caching attributes locally

In case you need to do database operations on remote attributes, like sorting, you can tell has_remote
to locally cache specific attributes in the following manner:

 class User < ActiveRecord::Base
   has_remote :site => '...' do |remote|
     remote.attribute :username, :local_cache => true
   end
 end

This assumes you also have a 'username' column in the local 'users' table.

Cached attributes will be updated every time the record is saved. Also there are two other
ways of keeping the locally cached attributes in sync with their remote values.

1. Manual synchronization
2. Rake task hr:sync

==== Manual synchronization

See HasRemote::Caching for more information on the available methods for triggering synchronization manually.

==== Rake hr:sync

The rake task 'hr:sync' is provided to allow easy synchronization from the command line.
You could set up a cron tab that runs this task regularly to keep the data in sync.

By default hr:sync updates all records of each model that has remotes. You can limit this to
certain models by using the MODELS parameter:

 rake hr:sync MODELS=Contact,Company

=== Documentation

To generate RDocs for this plugin, from the has_remote directory run:
 rake rdoc
or from your application's root directory, run:
 rake doc:plugins:has_remote 

=== Testing

To run the specs of the plugin, from the has_remote directory run:
 rake spec

(This requires you to have both RSpec and Shoulda installed.)

=== More information & patches

Questions, requests and patches can be directed to sjoerd.andringa[AT]innovationfactory[DOT]nl.


Copyright (c) 2009 Innovation Factory.